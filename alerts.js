const nodemailer = require('nodemailer');
const https = require('https');
const config = require('./config');

class AlertSystem {
    constructor() {
        this.emailTransporter = null;
        this.alertCooldowns = new Map(); // IP -> last alert time
        this.initEmailTransporter();
    }

    initEmailTransporter() {
        if (config.emailAlerts.enabled) {
            this.emailTransporter = nodemailer.createTransporter(config.emailAlerts.smtp);
        }
    }

    async sendAttackAlert(attackData) {
        const { ip, attackTypes, severity, payload, userAgent } = attackData;
        
        // Check cooldown
        const lastAlert = this.alertCooldowns.get(ip);
        const now = Date.now();
        
        if (lastAlert && (now - lastAlert) < config.emailAlerts.cooldownPeriod) {
            return; // Skip alert due to cooldown
        }

        // Send email alert
        if (config.emailAlerts.enabled && severity >= 3) {
            await this.sendEmailAlert(attackData);
        }

        // Send webhook alerts
        if (config.webhookAlerts.enabled && severity >= config.webhookAlerts.alertThreshold) {
            await this.sendWebhookAlerts(attackData);
        }

        // Update cooldown
        this.alertCooldowns.set(ip, now);
    }

    async sendEmailAlert(attackData) {
        const { ip, attackTypes, severity, payload, timestamp } = attackData;
        
        const severityText = this.getSeverityText(severity);
        const subject = `üö® Honeypot Alert: ${severityText} threat detected from ${ip}`;
        
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: #e74c3c; color: white; padding: 20px; text-align: center;">
                    <h2>üçØ Honeypot Security Alert</h2>
                </div>
                
                <div style="padding: 20px; background: #f8f9fa;">
                    <h3>Attack Details</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr style="background: #fff;">
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: bold;">IP Address:</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">${ip}</td>
                        </tr>
                        <tr style="background: #f8f9fa;">
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: bold;">Attack Types:</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">${attackTypes.join(', ')}</td>
                        </tr>
                        <tr style="background: #fff;">
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: bold;">Severity:</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">
                                <span style="background: ${this.getSeverityColor(severity)}; color: white; padding: 5px 10px; border-radius: 15px;">
                                    ${severityText}
                                </span>
                            </td>
                        </tr>
                        <tr style="background: #f8f9fa;">
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: bold;">Payload:</td>
                            <td style="padding: 10px; border: 1px solid #ddd; font-family: monospace; background: #f1f1f1;">
                                ${payload.substring(0, 200)}${payload.length > 200 ? '...' : ''}
                            </td>
                        </tr>
                        <tr style="background: #fff;">
                            <td style="padding: 10px; border: 1px solid #ddd; font-weight: bold;">Timestamp:</td>
                            <td style="padding: 10px; border: 1px solid #ddd;">${timestamp}</td>
                        </tr>
                    </table>
                </div>
                
                <div style="padding: 20px; background: #fff3cd; border-left: 4px solid #ffc107;">
                    <h4>‚ö†Ô∏è Recommended Actions:</h4>
                    <ul>
                        <li>Review the attack payload for potential threats</li>
                        <li>Consider blocking the IP address: ${ip}</li>
                        <li>Check for similar attacks from the same source</li>
                        <li>Update security rules if necessary</li>
                    </ul>
                </div>
                
                <div style="padding: 20px; text-align: center; background: #f8f9fa; color: #666;">
                    <p>This alert was generated by your Honeypot security system.</p>
                    <p>Dashboard: <a href="http://localhost:${config.server.port}/admin">View Admin Panel</a></p>
                </div>
            </div>
        `;

        const mailOptions = {
            from: config.emailAlerts.smtp.auth.user,
            to: config.emailAlerts.recipients.join(', '),
            subject: subject,
            html: html
        };

        try {
            await this.emailTransporter.sendMail(mailOptions);
            console.log(`üìß Email alert sent for attack from ${ip}`);
        } catch (error) {
            console.error('Failed to send email alert:', error.message);
        }
    }

    async sendWebhookAlerts(attackData) {
        const { ip, attackTypes, severity, payload } = attackData;
        
        const message = {
            text: `üö® Honeypot Alert: ${this.getSeverityText(severity)} threat detected`,
            attachments: [{
                color: this.getSeverityColor(severity),
                fields: [
                    { title: 'IP Address', value: ip, short: true },
                    { title: 'Attack Types', value: attackTypes.join(', '), short: true },
                    { title: 'Severity', value: this.getSeverityText(severity), short: true },
                    { title: 'Payload', value: payload.substring(0, 100) + '...', short: false }
                ]
            }]
        };

        for (const webhookUrl of config.webhookAlerts.urls) {
            try {
                await this.sendWebhook(webhookUrl, message);
                console.log(`üîó Webhook alert sent to ${webhookUrl.substring(0, 50)}...`);
            } catch (error) {
                console.error('Failed to send webhook alert:', error.message);
            }
        }
    }

    sendWebhook(url, data) {
        return new Promise((resolve, reject) => {
            const postData = JSON.stringify(data);
            const urlObj = new URL(url);
            
            const options = {
                hostname: urlObj.hostname,
                port: urlObj.port || 443,
                path: urlObj.pathname + urlObj.search,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(postData)
                }
            };

            const req = https.request(options, (res) => {
                if (res.statusCode >= 200 && res.statusCode < 300) {
                    resolve();
                } else {
                    reject(new Error(`HTTP ${res.statusCode}`));
                }
            });

            req.on('error', reject);
            req.write(postData);
            req.end();
        });
    }

    getSeverityText(severity) {
        const levels = {
            1: 'LOW',
            2: 'LOW',
            3: 'MEDIUM',
            4: 'HIGH',
            5: 'CRITICAL'
        };
        return levels[severity] || 'UNKNOWN';
    }

    getSeverityColor(severity) {
        const colors = {
            1: '#27ae60',
            2: '#27ae60',
            3: '#f1c40f',
            4: '#f39c12',
            5: '#e74c3c'
        };
        return colors[severity] || '#95a5a6';
    }

    // Send daily summary report
    async sendDailySummary(stats) {
        if (!config.emailAlerts.enabled) return;

        const subject = `üìä Daily Honeypot Summary - ${new Date().toDateString()}`;
        
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: #3498db; color: white; padding: 20px; text-align: center;">
                    <h2>üçØ Daily Honeypot Summary</h2>
                    <p>${new Date().toDateString()}</p>
                </div>
                
                <div style="padding: 20px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center;">
                            <h3 style="margin: 0; color: #e74c3c;">${stats.totalAttacks}</h3>
                            <p style="margin: 5px 0; color: #666;">Total Attacks</p>
                        </div>
                        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center;">
                            <h3 style="margin: 0; color: #3498db;">${stats.uniqueIPs}</h3>
                            <p style="margin: 5px 0; color: #666;">Unique IPs</p>
                        </div>
                    </div>
                    
                    <h3>Top Attack Types:</h3>
                    <ul>
                        ${stats.topAttackTypes.map(type => `<li>${type.name}: ${type.count} attempts</li>`).join('')}
                    </ul>
                    
                    <h3>Most Active IPs:</h3>
                    <ul>
                        ${stats.topIPs.map(ip => `<li>${ip.address}: ${ip.count} attempts</li>`).join('')}
                    </ul>
                </div>
            </div>
        `;

        const mailOptions = {
            from: config.emailAlerts.smtp.auth.user,
            to: config.emailAlerts.recipients.join(', '),
            subject: subject,
            html: html
        };

        try {
            await this.emailTransporter.sendMail(mailOptions);
            console.log('üìß Daily summary email sent');
        } catch (error) {
            console.error('Failed to send daily summary:', error.message);
        }
    }
}

module.exports = new AlertSystem();